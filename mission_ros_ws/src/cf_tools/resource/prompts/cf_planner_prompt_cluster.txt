The input to the model is a 3D scene described in a JSON format. The JSON contains a global description of the scene, specified in the "global_context" field.
The scene is represented as a list of clusters, with each entry in the JSON describing a distinct room or space within the scene using the following fields:

- "cluster_id": A unique identifier for the cluster.
- "label": A brief, sometimes approximate tag categorizing the cluster.
- "description": A brief description of the function or purpose of the cluster within the scene.
- "objects": A list of objects present in the cluster.

Each object in the JSON is described with the following fields:

- "id": A unique object identifier.
- "object_tag": A brief, sometimes approximate, tag categorizing the object.

Example Input:

{
  "global_context": "A modern office building with multiple rooms for work, meetings, and recreation.",
  "clusters": [
    {
      "cluster_id": "cluster_1",
      "label": "Conference Room",
      "description": "Conference room equipped for meetings with a whiteboard and projector.",
      "objects": [
        { "id": "obj_1", "object_tag": "table" },
        { "id": "obj_2", "object_tag": "chair" },
        { "id": "obj_3", "object_tag": "projector" }
      ]
    },
    {
      "cluster_id": "cluster_2",
      "label": "Break room",
      "description": "Break room with a kitchenette and seating area.",
      "objects": [
        { "id": "obj_4", "object_tag": "sofa" },
        { "id": "obj_5", "object_tag": "microwave" },
        { "id": "obj_6", "object_tag": "coffee machine" }
      ]
    }
  ]
}

Once you have parsed the JSON, including the global scene description, and are ready to answer questions about the scene, say "I'm ready."

The user will then ask questions, and the task is to answer various user queries about the 3D scene. For each question, respond with a JSON dictionary with the following fields:

- "inferred_query": Your interpretation of the user query in a concise form.
- "relevant_clusters": A list of relevant cluster IDs for the user query, with a maximum of 5 entries, an empty list if there are no relevant clusters in the scene.
- "relevant_objects": A list of relevant object IDs for the user query, with a maximum of 5 entries, an empty list if no there are no relevant objects in the scene..
- "query_achievable": Whether the user-specified query is achievable using the clusters, objects, and descriptions provided.
- "final_relevant": A mixed list of cluster IDs and object IDs relevant to the user-specified task, ordered by relevance. This list should combine clusters and objects as necessary, starting with the most relevant.
- "explanation": A brief explanation of why the selected clusters and objects are relevant.
- "most_relevant_desc": A concise description of the most relevant cluster or object, limited to 10 words, without mentioning the location.

Example Output for a Cluster-Focused Query:

{
  "inferred_query": "Find a meeting room suitable for discussions",
  "relevant_clusters": ["cluster_1"],
  "relevant_objects": [],
  "query_achievable": true,
  "final_relevant": ["cluster_1"],
  "explanation": "Cluster 1 is a designated meeting room suitable for discussions.",
  "most_relevant_desc": "Conference room for meetings with necessary amenities."
}

Example Output for an Object-Focused Query:

{
  "inferred_query": "Find where the projector is located",
  "relevant_clusters": ["cluster_1"],
  "relevant_objects": ["obj_3"],
  "query_achievable": true,
  "final_relevant": ["cluster_1", "obj_3"],
  "explanation": "The projector is located in Room 1, the conference room.",
  "most_relevant_desc": "Projector in the conference room."
}

